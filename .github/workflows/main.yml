name: FastAPI CI/CD

on:
  push:
    branches: [main, development]
  pull_request:
    branches: [main, development]

permissions:
  contents: write

# Re‚Äêusar versiones y directorios en todos los jobs
env:
  PYTHON_VERSION: "3.13"
  COVERAGE_REPORTS: coverage-reports
  AWS_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

###############################################################################
# 1.  LINTING ‚Äì pre-commit
###############################################################################
jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache Poetry virtualenv
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: ${{ runner.os }}-poetry-

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: poetry install --no-interaction --no-root --with dev

      - name: Run pre-commit
        run: poetry run pre-commit run


###############################################################################
# 2.  TEST ‚Äì contenedores + cobertura
###############################################################################
  test:
    runs-on: ubuntu-latest
    needs: lint        # solo se ejecuta si lint pasa

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      mongodb:
        image: mongo:4.4
        ports:
          - 27017:27017
        options: >-
          --health-cmd="mongo --eval 'db.runCommand({ ping: 1 })'"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      redis:
        image: redis:6
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: üßæ Checkout code
        uses: actions/checkout@v3

      - name: üèóÔ∏è Build test image
        run: |
          docker build --progress=plain -t my-test-image -f docker_images/testing/Dockerfile.testing .

      - name: üöÄ Run tests in container
        run: |
          docker run \
            --name my-tests \
            --network=host \
            -e CI=true \
            -e GITHUB_DATABASE_POSTGRESQL=postgresql://test:test@localhost:5432/test_db \
            -e GITHUB_DATABASE_MONGODB=mongodb://localhost:27017 \
            -e GITHUB_DATABASE_REDIS=redis://localhost:6379 \
            -v ${{ github.workspace }}/artifacts:/app/artifacts \
            my-test-image

      - name: üì• Copiar reportes desde el contenedor
        run: |
          mkdir -p ${{ env.COVERAGE_REPORTS }}
          docker cp my-tests:/app/coverage-reports/. ${{ env.COVERAGE_REPORTS }}

          echo "üìÑ Archivos copiados desde el contenedor:"
          ls -lh ${{ env.COVERAGE_REPORTS }}

      - name: üì§ Subir cobertura como artefacto
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.COVERAGE_REPORTS }}
          path: ${{ env.COVERAGE_REPORTS }}

      - name: Guardar coverage
        uses: ./.github/actions/save-coverage
        with:
          gh-token: ${{ secrets.GITHUB_TOKEN }}
          artifacts-branch: 'artifacts'
          coverage-source: ${{ env.COVERAGE_REPORTS }}
          is-artifact: false

###############################################################################
# 3.  BUILD ‚Äì empacar Lambda (o tu imagen de despliegue)
############################################# #1 from ronihdzz/feat/docker_deploy##################################
  build:
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/development'
    runs-on: ubuntu-latest
    needs: test                    # solo si los tests pasaron

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Package Lambda zip
        run: |
          python -m venv venv
          source venv/bin/activate
          cd venv/lib/python${{ env.PYTHON_VERSION }}/site-packages
          zip -r9 ../../../../api.zip .
          cd ../../../../src
          zip -g ../api.zip -r .

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: api-package
          path: api.zip

###############################################################################
# 4.  DEPLOY ‚Äì solo en rama main
###############################################################################
  deploy:
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/development'
    runs-on: ubuntu-latest
    needs: build                  # espera a que el build termine

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ env.AWS_REGION }}

      - name: Download package
        uses: actions/download-artifact@v4
        with:
          name: api-package

      - name: Upload to S3
        run: aws s3 cp api.zip s3://${{ secrets.AWS_S3_BUCKET }}/api.zip

      - name: Update Lambda code
        run: |
          aws lambda update-function-code \
            --function-name ${{ secrets.AWS_LAMBDA_FUNCTION_NAME }} \
            --s3-bucket      ${{ secrets.AWS_S3_BUCKET }} \
            --s3-key         api.zip

      - name: Wait for Lambda update
        run: |
          while true; do
            STATUS=$(aws lambda get-function-configuration \
              --function-name ${{ secrets.AWS_LAMBDA_FUNCTION_NAME }} \
              --query "LastUpdateStatus" --output text)
            echo "Lambda status: $STATUS"
            [[ "$STATUS" == "Successful" ]] && break
            sleep 5
          done

      - name: Publish new version
        run: aws lambda publish-version \
               --function-name ${{ secrets.AWS_LAMBDA_FUNCTION_NAME }}
